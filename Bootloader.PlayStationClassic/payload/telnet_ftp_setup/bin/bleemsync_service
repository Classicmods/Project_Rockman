#!/bin/sh
#
#  Copyright 2019 ModMyClassic (https://modmyclassic.com/license)
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
###############################################################################
# BleemSync Service
# Swingflip /ModMyClassic.com / https://discordapp.com/invite/8gygsrw
###############################################################################

start()
{
  # Overcommit DRAM memory to prevent so many crashes
	echo 1 > /proc/sys/vm/overcommit_memory

	# Inject any optional kernel modules during runtime
	for mod in /opt/bleemsync_kernel/*.ko; do insmod "$mod"; done

	# Load up RDNIS
	MOD="BleemSync"
	ANDROIDCFG="/sys/class/android_usb/android0"
	CHG_INFO=$(cat /sys/module/musb_hdrc/parameters/charger_info)
	# Check if Charger with Data is detected
	if [ "$CHG_INFO" -eq "1" ]; then
		# Generate console MAC address
		macfile="/data/rndis-mac-address"
		if [ ! -f "$macfile" ]; then
			dd if=/dev/urandom bs=6 count=1 2>/dev/null | hexdump -e '6/1 "%02x"' > "$macfile"
			sync &>/dev/null
		fi
		mac=$(cat "$macfile")
		# Enable gadget
		echo "0" > "$ANDROIDCFG/enable"
		echo "rndis,acm" > "$ANDROIDCFG/functions"
		echo "$MOD" > "$ANDROIDCFG/iManufacturer"
		echo "classic" > "$ANDROIDCFG/iProduct"
		echo "$mac" > "$ANDROIDCFG/iSerial"
		echo "$MOD" > "$ANDROIDCFG/f_rndis/manufacturer"
		echo "057e" > "$ANDROIDCFG/f_rndis/vendorID"
		echo "1" > "$ANDROIDCFG/f_rndis/wceis"
		echo "04e8" > "$ANDROIDCFG/idVendor"
		echo "6863" > "$ANDROIDCFG/idProduct"
		echo 0 > "$ANDROIDCFG/bDeviceClass"
		echo 1 > "$ANDROIDCFG/f_rndis/wceis"
		echo 1 > "$ANDROIDCFG/f_acm/instances"
		echo 1 > "$ANDROIDCFG/enable"
		sleep 2
		ifconfig rndis0 169.254.215.100 netmask 255.255.0.0
		#This is a REALLY shitty workaround but sometimes the systemd on the PSC
		#Will cause the ftp socket to fail so this ensures it doesn't (need to fix this)
		systemctl start ftp.socket
	fi
	
	# Enable ZRAM Compression Optimisation
	num_cpus="$(grep ^processor /proc/cpuinfo | wc -l)"
	mem_total_kb="$(grep ^MemTotal /proc/meminfo | awk '{print $2}')"
	mem_total=$((mem_total_kb * 1024))
	disksize="$((mem_total / 2 / num_cpus))"
	[ ! -e /dev/zram1 ] && cat /sys/class/zram-control/hot_add &> /dev/null
	[ ! -e /dev/zram2 ] && cat /sys/class/zram-control/hot_add &> /dev/null
	[ ! -e /dev/zram3 ] && cat /sys/class/zram-control/hot_add &> /dev/null
	for i in $(seq 0 "$((num_cpus - 1))"); do
		echo "Generating zswap space of $disksize BYTES for zram device: $i"
		zram="zram$i"
		echo "$disksize" > "/sys/block/$zram/disksize"
		mkswap -L "$zram" "/dev/$zram"
		swapon -p 100 "/dev/$zram"
	done
}

stop()
{
	MOD="BleemSync"
	ANDROIDCFG="/sys/class/android_usb/android0"
	echo "0" > "$ANDROIDCFG/enable"

	swapoff /dev/zram0
	swapoff /dev/zram1
	swapoff /dev/zram2
	swapoff /dev/zram3

	echo 1 > /sys/block/zram0/reset
	echo 1 > /sys/block/zram1/reset
	echo 1 > /sys/block/zram2/reset
	echo 1 > /sys/block/zram3/reset
}

case "$1" in
start)
	start
;;
stop)
	stop
;;
restart)
	stop
	start
;;
*)
	echo "Usage: $0 {start|stop|status|restart}"
	exit 1
esac
