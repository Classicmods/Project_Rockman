#!/bin/sh
#
#  Copyright 2019 ModMyClassic (https://modmyclassic.com/license)
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
###############################################################################
# BleemSync Bootloader - CLOSED SOURCE (to prevent people from fucking it up)
# If someone knows how to open the payload and extract this file then
# hopefully they know what to modify and what not to modify!
# ModMyClassic.com / https://discordapp.com/invite/8gygsrw
###############################################################################

killall -s KILL sonyapp ui_menu


hack_usb_func(){
  echo "[BLEEMSYNC](Executing) hack_usb_func()"
  if [ "$(cat /etc/versions/variant)" != "dev" ]; then
	  ./sdl_text_display "Hacking USB Protocol..." $text_x $text_y $text_size $text_font 255 255 255 $background $text_bg
    echo 1 > /sys/class/leds/red/brightness
    if [ ! -f "/tmp/bs_splash.flag" ]; then
      ./sdl_display "splashscreen.png" &
      touch "/tmp/bs_splash.flag"
    fi
    mount -o remount,rw /
    echo dev > /etc/versions/variant
    passwd -d root
    sync
    mount -o remount,ro /
    if [ "$(cat /etc/versions/variant)" = "dev" ]; then
      echo "[BLEEMSYNC](SUCCESS) hack_usb_func()"
    else
      echo "[BLEEMSYNC](FAIL) hack_usb_func()"
    fi
    echo 0 > /sys/class/leds/red/brightness
  else
    echo "[BLEEMSYNC](INFO) Skipping as usb hack already done"
  fi
  echo "[BLEEMSYNC](Executed) hack_usb_func()"
}

install_ssh(){
  echo "[BLEEMSYNC](Executing) install_ssh()"
  TEMPHACKDIR="/tmp/ssh_setup"

  SYSDSERVDIR="/etc/systemd/system"
  if [ -f "/media/bleemsync/flags/UPDATE_SSH" ] || [ ! -f "$SYSDSERVDIR/ssh.service" ]; then
	  ./sdl_text_display "Installing SSH payload..." $text_x $text_y $text_size $text_font 255 255 255 $background $text_bg
    echo 1 > /sys/class/leds/red/brightness
    if [ ! -f "/tmp/bs_splash.flag" ]; then
      ./sdl_display "splashscreen.png" &
      touch "/tmp/bs_splash.flag"
    fi
    # Add proper busybox and telnetd, ftpd, bleemsync service
    mkdir -p "$TEMPHACKDIR/bin" "$TEMPHACKDIR/sbin" "$TEMPHACKDIR/etc"

    cp -f "ssh_setup/"* "$TEMPHACKDIR/"
    cp -f "ssh_setup/bin/"* "$TEMPHACKDIR/bin/"
    cp -f "ssh_setup/sbin/"* "$TEMPHACKDIR/sbin/"
    cp -f "ssh_setup/etc/"* "$TEMPHACKDIR/etc/"
    cp -f "ssh_setup/"* "$TEMPHACKDIR/"
    cp -f "ssh_setup/bin/"* "$TEMPHACKDIR/bin/"
    mount -o remount,rw /

    cp -f "$TEMPHACKDIR/bin/"* "/usr/bin/" && chmod 755 "/usr/bin/ssh"* "/usr/bin/sftp" "/usr/bin/scp" "/usr/bin/c_rehash"
    cp -f "$TEMPHACKDIR/sbin/"* "/usr/sbin" && chmod 755 "/usr/sbin/sshd"
    mkdir -p "/usr/etc" && cp -f "$TEMPHACKDIR/etc/"* "/usr/etc"
    cp -f "$TEMPHACKDIR/"* "$SYSDSERVDIR/" && chmod 664 "$SYSDSERVDIR/ssh.service"
    systemctl daemon-reload
    # Setup SSHD
    ssh-keygen -A
    ! grep -q sshd /etc/group && echo -e "sshd:x:74:\n" >> /etc/group
    ! grep -q sshd /etc/passwd && echo -e "sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin\n" >> /etc/passwd
    mkdir -p /var/empty
    #Config network and enable telnet + FTP socket listening when initially hacked.
    systemctl start ssh.service && systemctl enable ssh.service
    sync
    sleep 2
    mount -o remount,ro /
    rm -rf $TEMPHACKDIR
    [ -f "/media/bleemsync/flags/UPDATE_SSH" ] && rm -f "/media/bleemsync/flags/UPDATE_SSH"
    SCHEDULE_REBOOT=1
  else
    echo "[BLEEMSYNC](INFO) Skipping as SSH already installed"
  fi
  echo "[BLEEMSYNC](Executed) install_ssh()"
}

install_usb_host(){
  echo "[BLEEMSYNC](Executing) install_usb_host()"
  TEMPHACKDIR="/tmp/usbhost"

  SYSDSERVDIR="/etc/systemd/system"
  if [ -f "/media/bleemsync/flags/UPDATE_USBHOST" ] || [ ! -f "$SYSDSERVDIR/usbhost.service" ]; then
	  ./sdl_text_display "Installing USB HOST Service payload..." $text_x $text_y $text_size $text_font 255 255 255 $background $text_bg
    echo 1 > /sys/class/leds/red/brightness
    if [ ! -f "/tmp/bs_splash.flag" ]; then
      ./sdl_display "splashscreen.png" &
      touch "/tmp/bs_splash.flag"
    fi
    # Add kernel modules to temp deployment
    mkdir -p "$TEMPKERNELDIR"
    cp -f "kernel_modules/"*.ko "$TEMPKERNELDIR/"
    # Add proper busybox and telnetd, ftpd, bleemsync service
    mkdir -p "$TEMPHACKDIR/bin"
    cp -f "usb_host_setup/"* "$TEMPHACKDIR/"
    cp -f "usb_host_setup/bin/"* "$TEMPHACKDIR/bin/"
    mount -o remount,rw /
    cp -f "$TEMPHACKDIR/bin/"* "/usr/bin/" && chmod 755 "/usr/bin/usbhost_service"
    cp -f "$TEMPHACKDIR/"* "$SYSDSERVDIR/" && chmod 664 "$SYSDSERVDIR/usbhost.service"
    systemctl daemon-reload
    systemctl enable usbhost.service
    sync
    sleep 2
    mount -o remount,ro /
    rm -rf $TEMPHACKDIR

    [ -f "/media/bleemsync/flags/UPDATE_USBHOST" ] && rm -f "/media/bleemsync/flags/UPDATE_USBHOST"
    SCHEDULE_REBOOT=1
  else
    echo "[BLEEMSYNC](INFO) Skipping as USB HOST service already installed"
  fi
  echo "[BLEEMSYNC](Executed) install_usb_host()"
}

hack_telnet_ftp_func(){
  echo "[BLEEMSYNC](Executing) hack_telnet_ftp_func()"
  TEMPHACKDIR="/tmp/telnethack"
  TEMPKERNELDIR="/tmp/kerneltmp"
  SYSDSERVDIR="/etc/systemd/system"
  if [ ! -f "$SYSDSERVDIR/telnet@.service" ] || [ -f "/media/bleemsync/flags/UPDATE_TELNET" ]; then
	  ./sdl_text_display "Installing custom payload..." $text_x $text_y $text_size $text_font 255 255 255 $background $text_bg
    echo 1 > /sys/class/leds/red/brightness
    if [ ! -f "/tmp/bs_splash.flag" ]; then
      ./sdl_display "splashscreen.png" &
      touch "/tmp/bs_splash.flag"
    fi
    # Add kernel modules to temp deployment
    mkdir -p "$TEMPKERNELDIR"
    cp -f "kernel_modules/"*.ko "$TEMPKERNELDIR/"
    # Add proper busybox and telnetd, ftpd, bleemsync service
    mkdir -p "$TEMPHACKDIR/bin" "$TEMPHACKDIR/sbin" "$TEMPHACKDIR/etc"
    cp -f "bleemsync_loader.ver" "$TEMPHACKDIR/"
    cp -f "telnet_ftp_setup/"* "$TEMPHACKDIR/"
    cp -f "telnet_ftp_setup/bin/"* "$TEMPHACKDIR/bin/"
    mount -o remount,rw /
    cp -f "$TEMPHACKDIR/bleemsync_loader.ver" "/etc/versions/"
    echo "bleemsync" > /etc/hostname
    cp -f "$TEMPHACKDIR/bin/"* "/usr/bin/" && chmod 755 "/usr/bin/busybox-bs" "/usr/bin/bleemsync_service" "/usr/bin/motd-bs" "/usr/bin/blkid" "/usr/bin/mount.exfat" "/usr/bin/mount.ntfs"
    mv -f "/usr/bin/mount.exfat" "/sbin/mount.exfat" && mv -f "/usr/bin/mount.ntfs" "/sbin/mount.ntfs"
    rm -f "/sbin/blkid"
    mv -f "/usr/bin/motd-bs" "/etc/profile.d/motd-bs.sh"
    cp -f "$TEMPHACKDIR/"* "$SYSDSERVDIR/" && chmod 664 "$SYSDSERVDIR/telnet.socket" "$SYSDSERVDIR/telnet@.service" "$SYSDSERVDIR/ftp.socket" "$SYSDSERVDIR/ftp@.service" "$SYSDSERVDIR/bleemsync.service"
    systemctl daemon-reload
    # Inject kernel modules to console's filesystem
    mkdir -p "/opt/bleemsync_kernel"
    cp -f "$TEMPKERNELDIR/"* "/opt/bleemsync_kernel/"
    #Config network and enable telnet + FTP socket listening when initially hacked.
    systemctl start bleemsync.service && systemctl enable bleemsync.service
    systemctl start telnet.socket && systemctl enable telnet.socket
    systemctl start ftp.socket && systemctl enable ftp.socket
    sync
    sleep 2
    mount -o remount,ro /
    rm -rf $TEMPHACKDIR
    rm -rf $TEMPKERNELDIR
    [ -f "/media/bleemsync/flags/UPDATE_TELNET" ] && rm -f "/media/bleemsync/flags/UPDATE_TELNET"
    SCHEDULE_REBOOT=1

  else
    echo "[BLEEMSYNC](INFO) Skipping as TELNET+FTP+BLEEMSYNC already installed"
  fi
  echo "[BLEEMSYNC](Executed) hack_usb_func()"
}

install_recoverykit(){

  echo "[BLEEMSYNC](Executing) install_recoverykit()"

  RECOVERY_PART=/dev/disk/by-partlabel/ROOTFS2

  if [ ! -f /usr/bin/reboot-recovery ] || [ -f /media/bleemsync/flags/UPDATE_RECOVERYKIT ]; then

    ./sdl_text_display "Installing recoverykit..." $text_x $text_y $text_size $text_font 255 255 255 $background $text_bg
    echo 1 > /sys/class/leds/red/brightness
    if [ ! -f "/tmp/bs_splash.flag" ]; then
      ./sdl_display "splashscreen.png" &
      touch "/tmp/bs_splash.flag"
    fi

    [ ! -d "${RECOVERY_PATH}" ] && mkdir -p "${RECOVERY_PATH}"
    mount "${RECOVERY_PART}" "${RECOVERY_PATH}"

    cp recoverykit/systemctl/* "${RECOVERY_PATH}/etc/systemd/system/"
    chmod 664 "${RECOVERY_PATH}/etc/systemd/system/"{bleemsync.service,ftp.socket,ftp@.service,telnet.socket,telnet@.service}
    cp recoverykit/bin/* "${RECOVERY_PATH}/usr/bin/"
    chmod 755 "${RECOVERY_PATH}/usr/bin/"{busybox-bs,reboot-normal,bleemsync_service}
    chroot "${RECOVERY_PATH}" systemctl enable bleemsync.service ftp.socket telnet.socket
    chroot "${RECOVERY_PATH}" passwd -d root
    umount "${RECOVERY_PATH}"
    echo "Installation on recovery rootfs done"

    mount -o remount,rw /
    cp recoverykit/bin_normal/* /usr/bin/
    chmod 755 /usr/bin/reboot-recovery
    mount -o remount,ro /
    echo "Installation on main rootfs done"


    [ -f "/media/bleemsync/flags/UPDATE_RECOVERYKIT" ] && rm -f "/media/bleemsync/flags/UPDATE_RECOVERYKIT"
    SCHEDULE_REBOOT=1
  else
    echo "[BLEEMSYNC](INFO) Skipping as RECOVERYKIT already installed"
  fi
  echo "[BLEEMSYNC](Executed) install_recoverykit()"
}

unfuck_line_terminators(){
  echo "[BLEEMSYNC](Executing) unfuck_line_terminators()"
	./sdl_text_display "Fixing line terminators..." $text_x $text_y $text_size $text_font 255 255 255 $background $text_bg
  find "/media/bleemsync/etc/bleemsync/CFG/"* -exec sed -i 's/\r//g' {} \;
  find "/media/bleemsync/etc/bleemsync/FUNC/"* -exec sed -i 's/\r//g' {} \;
  find "/media/bleemsync/etc/bleemsync/SUP/scripts/"* -exec sed -i 's/\r//g' {} \;
  find "/media/bleemsync/etc/bleemsync/SYS/" -name *.pre -exec sed -i 's/\r//g' {} \;
  echo "[BLEEMSYNC](Executed) unfuck_line_terminators()"
}

general_unfuck(){
  echo "[BLEEMSYNC](Executing) general_unfuck()"
 	./sdl_text_display "Initialising..." $text_x $text_y $text_size $text_font 255 255 255 $background $text_bg
  # Clean out old shit
  [ -d "/media/lolhack" ] && mv "/media/lolhack" "/media/lolhack-RemoveMe"
  [ -d "/media/028c18a9-ec4b-4632-b2cf-d4e20f252e8f" ] && mv "/media/028c18a9-ec4b-4632-b2cf-d4e20f252e8f" "/media/payload-RemoveMe"
  if [ $(ls "/media" | grep "RemoveMe" | head -1) ]; then
    mkdir -p "/media/REVIEW_AND_DELETE_ME/"
    mv -f "/media/"*"-RemoveMe" "/media/REVIEW_AND_DELETE_ME/"
    touch "/media/REVIEW_AND_DELETE_ME/README.txt"
    echo "These folders are from old installs before BleemSync 0.7 and are not required. Please check you haven't put any useful files in here then delete this directory" >> "/media/REVIEW_AND_DELETE_ME/README.txt"
  fi

  #Check for old deployment of RA shit and migrate it
  if [ -d "/media/RetroArch" ]; then
    if [ -d "/media/bleemsync/opt/retroarch" ]; then
      echo "[BLEEMSYNC](INFO) Migrating old RetroArch user data from /media/RetroArch to /media/bleemsync/opt/retroarch"
      # Migrate user data
      mv -f "/media/RetroArch/saves/"* "/media/bleemsync/opt/retroarch/saves/"
      mv -f "/media/RetroArch/savestates/"* "/media/bleemsync/opt/retroarch/savestates/"
      mv -f "/media/RetroArch/RetroArch/.config/retroarch/playlists/"* "/media/bleemsync/opt/retroarch/.config/retroarch/playlists/"
      mv "/media/RetroArch/RetroArch/system/"* "/media/bleemsync/opt/retroarch/system/"
      mv "/media/RetroArch/RetroArch/.config/retroarch/cores/"* "/media/bleemsync/opt/retroarch/.config/retroarch/cores/"
      # Move the original folder so if someone has stored other files in it they can manually sort them
      echo "[BLEEMSYNC](INFO) Moving remaining old RetroArch data from /media/RetroArch to /media/REVIEW_AND_DELETE_ME/retroarch"
      mkdir -p "/media/REVIEW_AND_DELETE_ME/"
      mv -f "/media/RetroArch/" "/media/REVIEW_AND_DELETE_ME/retroarch"
    else
      echo "[BLEEMSYNC](ERROR)(FAIL) /media/bleemsync/opt/retroarch does not exist so it is not possible to migrate old RetroArch data (this install may be corrupt as this is a standard file)"
    fi
  fi

  #Clean out dummies
  rm -f "/media/bleemsync/opt/retroarch/savestates/dummy"
  rm -f "/media/bleemsync/opt/retroarch/system/dummy"
  rm -f "/media/bleemsync/opt/retroarch/saves/dummy"
  rm -f "/media/bleemsync/opt/retroarch/.config/retroarch/cheats/dummy"
  rm -f "/media/bleemsync/opt/retroarch/.config/retroarch/database/rdb/dummy"
  rm -f "/media/bleemsync/opt/retroarch/.config/retroarch/playlists/dummy"

  # Reformat some old shit
  [ $(ls "/media" | grep "Games" | head -1) ] && mv "/media/Games" "/media/_Games" && mv "/media/_Games" "/media/games"
  if [ $(ls "/media" | grep "System" | grep -v "System Volume Information" | head -1) ]; then
    mv "/media/System/" "/media/_System/" && mv "/media/_System/" "/media/system/"
    [ $(ls "/media/system" | grep "Bios" | head -1) ] && mv "/media/system/Bios/" "/media/system/_Bios/" && mv "/media/system/_Bios/" "/media/system/bios/"
    [ $(ls "/media/system" | grep "BleemSync" | head -1) ] && mv "/media/system/BleemSync/" "/media/system/_BleemSync/" && mv "/media/system/_BleemSync/" "/media/system/bleemsync/"
    [ $(ls "/media/system" | grep "Defaults" | head -1) ] && mv "/media/system/Defaults/" "/media/system/_Defaults/" && mv "/media/system/_Defaults/" "/media/system/defaults/"
    [ $(ls "/media/system" | grep "Databases" | head -1) ] && mv "/media/system/Databases/" "/media/system/_Databases/" && mv "/media/system/_Databases/" "/media/system/databases/"
    [ $(ls "/media/system" | grep "Logs" | head -1) ] && rm -rf "/media/system/Logs" && rm -rf "/media/system/Logs"
    [ $(ls "/media/system" | grep "Preferences" | head -1) ] && mv "/media/system/Preferences/" "/media/system/_Preferences/" && mv "/media/system/_Preferences/" "/media/system/preferences/"
    [ $(ls "/media/system/preferences" | grep "AutoDimmer" | head -1) ] && mv "/media/system/preferences/AutoDimmer/" "/media/system/preferences/_AutoDimmer/" && mv "/media/system/preferences/_AutoDimmer/" "/media/system/preferences/autodimmer/"
    [ $(ls "/media/system/preferences" | grep "System" | head -1) ] && mv "/media/system/preferences/System/" "/media/system/preferences/_System/" && mv "/media/system/preferences/_System/" "/media/system/preferences/system/"
    [ $(ls "/media/system/preferences" | grep "User" | head -1) ] && mv "/media/system/preferences/User/" "/media/system/preferences/_User/" && mv "/media/system/preferences/_User/" "/media/system/preferences/user/"
    [ $(ls "/media/system" | grep "Region" | head -1) ] && mv "/media/system/Region/" "/media/system/_Region/" && mv "/media/system/_Region/" "/media/system/region/"
    [ $(ls "/media/system" | grep "UI" | head -1) ] && mv "/media/system/UI/" "/media/system/_UI/" && mv "/media/system/_UI/" "/media/system/ui/"
  fi

  echo "[BLEEMSYNC](Executed) general_unfuck()"
}


update(){
  echo "[BLEEMSYNC](Executing) update()" >> "$runtime_log_path/bootloader.log" 2>&1


  mount -o remount,rw /
  [ ! -f "${NORMAL_PEM_PATH}/upg_pubk_sony.pem" ] && cp -f "${NORMAL_PEM_PATH}/upg_pubk.pem" "${NORMAL_PEM_PATH}/upg_pubk_sony.pem"
  mount -o bind "update/upg_pubk.pem" $PUBK_PATH


  if [ -f "/media/bleemsync/update/LBOOT.EPB" ] && image_verify_tool "/media/bleemsync/update/LBOOT.EPB" /tmp/normal.verf; then
    if blkid /dev/disk/by-label/SONY | grep ntfs || blkid /dev/disk/by-label/SONY | grep exfat; then
      log_and_display "ERROR" "Kernel cannot be updated from NTFS or exFAT drive. Please use FAT/EXTFS Drive or remove update!"
      while true; do
        echo 1 > /sys/class/leds/red/brightness
        echo 0 > /sys/class/leds/green/brightness
        sleep 1
      done
    fi
    mkdir -p "${RECOVERY_PATH}" && mount /dev/disk/by-partlabel/ROOTFS2 -o rw $RECOVERY_PATH
    [ -d ${RECOVERY_PEM_PATH} ] && [ ! -f "${RECOVERY_PEM_PATH}/upg_pubk_sony.pem" ] && cp -f "${RECOVERY_PEM_PATH}/upg_pubk.pem" "${RECOVERY_PEM_PATH}/upg_pubk_sony.pem"
    cp -f "update/upg_pubk.pem" "${RECOVERY_PEM_PATH}/upg_pubk.pem"

    mv "/media/bleemsync/update/LBOOT.EPB" "/media"
    echo "[BLEEMSYNC](INFO) Starting upgrade" >> "$runtime_log_path/bootloader.log" 2>&1

    log_and_display "INFO" "Updating Kernel in 5... Don't turn off your console!!"
    sleep 1
    log_and_display "INFO" "Updating Kernel in 4... Don't turn off your console!!"
    sleep 1
    log_and_display "INFO" "Updating Kernel in 3... Don't turn off your console!!"
    sleep 1
    log_and_display "INFO" "Updating Kernel in 2... Don't turn off your console!!"
    sleep 1
    log_and_display "INFO" "Updating Kernel in 1... Don't turn off your console!!"
    sleep 1

    umount -l /media && upgrade_app normal
  else
    echo "[BLEEMSYNC](INFO) Skipping Update" >> "$runtime_log_path/bootloader.log" 2>&1
  fi
  mount -o remount,ro /
  echo "[BLEEMSYNC](Executed) update()" >> "$runtime_log_path/bootloader.log" 2>&1
}

uninstall(){

  if [ -f "/media/bleemsync/flags/UNINSTALL" ]; then
    systemctl stop ftp.socket
    systemctl stop telnet.socket
    systemctl stop bleemsync.service
    systemctl stop ssh.service
    systemctl stop usbhost.service
    mount -o remount,rw /
    # Link original blkid
    ln -sf /bin/busybox.nosuid /sbin/blkid
    # Remove binaries
    rm -f /usr/bin/{busybox-bs,bleemsync_service,blkid,ssh*,sftp,scp,c_rehash,usbhost_service} /sbin/{mount.exfat,mount.ntfs} /usr/sbin/sshd
    rm -f /etc/profile.d/motd-bs.sh
    rm -rf /usr/etc
    # Remove kernel modules
    find /opt/bleemsync_kernel -type f -exec rmmod {} \;
    rm -rf /opt
    # Remove systemd units
    systemctl disable ftp.socket
    systemctl disable telnet.socket
    systemctl disable bleemsync.service
    systemctl disable ssh.service
    systemctl disable usbhost.service
    rm -f /etc/systemd/system/{bleemsync.service,ftp.socket,ftp@.service,telnet.socket,telnet@.service,ssh.service,usbhost.service}
    rm -f /etc/versions/bleemsync_loader.ver /etc/systemd/system/bleemsync_loader.ver
    rm -f /data/rndis-mac-address
    sed -i "s/iUiUserSettingLastSelectGameCursorPos=.*/iUiUserSettingLastSelectGameCursorPos=0/" /data/AppData/sony/ui/user.pre
    #Remove SSH account
    sed -i '/^sshd/d' /etc/group
    sed -i '/^sshd/d' /etc/passwd
    # Restore hostname
    echo aiv8167-rockman-emmc > /etc/hostname
    # Disable root shell access
    passwd -l root
    # Revert variant change
    if [ "$(cat /etc/hostname)" = "aiv8167-rockman-emmc" ]; then
        echo user > /etc/versions/variant
    fi

    # Remove RecoveryKit
    rm -f /usr/bin/reboot-recovery
    [ ! -d "${RECOVERY_PATH}" ] && mkdir -p "${RECOVERY_PATH}"
    mount "${RECOVERY_PART}" "${RECOVERY_PATH}"
    chroot "${RECOVERY_PATH}" systemctl disable bleemsync.service ftp.socket telnet.socket
    rm -f "${RECOVERY_PATH}/etc/systemd/system/"{bleemsync.service,ftp.socket,ftp@.service,telnet.socket,telnet@.service}
    rm -f "${RECOVERY_PATH}/usr/bin/"{busybox-bs,reboot-normal,bleemsync_service}
    chroot "${RECOVERY_PATH}" passwd -l root
    umount "${RECOVERY_PATH}"


    MD5_MAIN_KERNEL=$(md5sum < /dev/disk/by-partlabel/BOOTIMG1 | cut -d\  -f1)
    MD5_REC_KERNEL=$(md5sum < /dev/disk/by-partlabel/BOOTIMG2 | cut -d\  -f1)
    MD5_ORIG="28ce5f6de4981764411393310311b517"

    if [ $MD5_MAIN_KERNEL != $MD5_REC_KERNEL ]; then
      dd if=/dev/disk/by-partlabel/BOOTIMG2 /dev/disk/by-partlabel/BOOTIMG1
    fi

    [ -f /etc/upg_pubk_sony.pem ] && rm /etc/upg_pubk.pem && mv /etc/upg_pubk_sony.pem /etc/upg_pubk.pem
    mkdir /tmp/recovery && mount /dev/disk/by-partlabel/ROOTFS2 /tmp/recovery
    [ -f /tmp/recovery/etc/upg_pubk_sony.pem ] && rm /tmp/recovery/etc/upg_pubk.pem && mv /tmp/recovery/etc/upg_pubk_sony.pem /tmp/recovery/etc/upg_pubk.pem

    sync
    mount -o remount,ro /

    log_and_display "INFO" "Uninstall successful. Remove USB Drive and restart your PSC!"
    # ENDLESS LOOP
    i=1
    while true; do
      echo 1 > /sys/class/leds/red/brightness
      sleep 1 && i=$(( $i + 1 ))
      echo 0 > /sys/class/leds/red/brightness
      sleep 1 && i=$(( $i + 1 ))
    done
  fi
}

main(){
  start=$(date +%s)
  time1=$(date +%s%N)

  source util
  source backup_restore


	bleemsync_path="/media/bleemsync"

  if [ ! -f "$bleemsync_path/etc/bleemsync/CFG/bleemsync_cfg.INI" ] || [ -f "$bleemsync_path/flags/UPDATE_CONFIG" ]; then
    echo "[BLEEMSYNC](INFO) Injecting default bleemsync config..."
    cat "$bleemsync_path/etc/bleemsync/CFG/bleemsync_cfg_DEFAULT.INI" > "$bleemsync_path/etc/bleemsync/CFG/bleemsync_cfg.INI"
    rm -f "$bleemsync_path/flags/UPDATE_CONFIG"
  fi
  if [ ! -f "$bleemsync_path/etc/bleemsync/CFG/boot_sequence.cfg" ] || [ -f "$bleemsync_path/flags/UPDATE_BOOT" ]; then
    echo "[BLEEMSYNC](INFO) Injecting default boot sequence..."
    cat "$bleemsync_path/etc/bleemsync/CFG/boot_sequence_DEFAULT.cfg" > "$bleemsync_path/etc/bleemsync/CFG/boot_sequence.cfg"
    rm -f "$bleemsync_path/flags/UPDATE_BOOT"
  fi
  if [ ! -f "$bleemsync_path/opt/retroarch/.config/retroarch/retroarch.cfg" ] || [ -f "$bleemsync_path/flags/UPDATE_RA_CONFIG" ]; then
    echo "[BLEEMSYNC](INFO) Injecting default retroarch config..."
    cat "$bleemsync_path/opt/retroarch/.config/retroarch/retroarch_DEFAULT.cfg" > "$bleemsync_path/opt/retroarch/.config/retroarch/retroarch.cfg"
    rm -f "$bleemsync_path/flags/UPDATE_RA_CONFIG"
  fi
  [ ! -f "$bleemsync_path/opt/retroarch/.config/retroarch/retroarch-core-options.cfg" ] && touch "$bleemsync_path/opt/retroarch/.config/retroarch/retroarch-core-options.cfg"

  ini_file="/media/bleemsync/etc/bleemsync/CFG/bleemsync_cfg.INI"
  cfg_file="/var/volatile/bleemsync.cfg"

	[ ! -f $ini_file ]
  [ -f "$cfg_file" ] && rm -f "$cfg_file" && touch "$cfg_file"
  echo "#!/bin/sh" >> "$cfg_file"
  cat "$ini_file" | grep -v ";" | grep -v "\[" >> "$cfg_file"

  if [ -f "$cfg_file" ]; then
    . "$cfg_file"
  else
    echo "wtf" #Add a proper error at some point here...
  fi

  #General Maintenance
  [ ! -d "$runtime_log_path" ] && mkdir -p "$runtime_log_path"
  [ ! -d "$runtime_flag_path" ] && mkdir -p "$runtime_flag_path"
  [ "$refresh_logs" = "1" ] && rm -rf "$runtime_log_path/"*

	[ ! -d "/media/bleemsync/backup" ] && mkdir -p "/media/bleemsync/backup"

  [ -f "$runtime_log_path/bootloader.log" ] && rm -f "$runtime_log_path/bootloader.log"
  touch "$runtime_log_path/bootloader.log"
  echo "*** BleemSync Bootloader ******************************************************" >> "$runtime_log_path/bootloader.log"
  echo "ModMyClassic.com / https://discordapp.com/invite/8gygsrw" >> "$runtime_log_path/bootloader.log"
  echo "*******************************************************************************" >> "$runtime_log_path/bootloader.log"
  echo >> "$runtime_log_path/bootloader.log"

  chmod +x sdl_text_display >> "$runtime_log_path/bootloader.log" 2>&1
  chmod +x sdl_display >> "$runtime_log_path/bootloader.log" 2>&1
  chmod +x sdl_play >> "$runtime_log_path/bootloader.log" 2>&1
  chmod +x $PSC_BACKUP >> "$runtime_log_path/bootloader.log" 2>&1
  chmod +x $EXTRACT_PEM >> "$runtime_log_path/bootloader.log" 2>&1
  chmod +x "/media/bleemsync/etc/bleemsync/SUP/binaries/pcsx" >> "$runtime_log_path/bootloader.log" 2>&1
  chmod +x "/media/bleemsync/bin/"* >> "$runtime_log_path/bootloader.log" 2>&1

  time2=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) general_maintenance took: $(((time2-time1)/1000000))ms to execute" >> "$runtime_log_path/bootloader.log"

  wait_sdl >> "$runtime_log_path/bootloader.log" 2>&1

  if [ "$boot_quick" = "1" ]; then
		killall -s KILL showLogo
  fi

	wait_for_completion_no_LED showLogo

  if [ "$boot_splash" = "1" ]; then
    if [ ! -f "/media/bleemsync/etc/bleemsync/IMG/splashscreen.png" ]; then
      ./sdl_display "splashscreen.png" &
      touch "/tmp/bs_splash.flag"
    else
      ./sdl_display "/media/bleemsync/etc/bleemsync/IMG/splashscreen.png" &
      touch "/tmp/bs_splash.flag"
    fi
  fi

  time1=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) boot_splash took: $(((time1-time2)/1000000))ms to execute" >> "$runtime_log_path/bootloader.log"

  PATH=$(pwd):$PATH

  # Trigger Uninstall if requested
  uninstall

  # Trigger Restore Scripts before anything else
  restore

  # Trigger Backup Scripts before installing anything
  backup >> "$runtime_log_path/bootloader.log" 2>&1
  time2=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) backup took: $(((time2-time1)/1000000))ms to execute" >> "$runtime_log_path/bootloader.log"


  if [ "$usb_only" = "0" ]; then
    hack_usb_func >> "$runtime_log_path/bootloader.log" 2>&1
    time1=$(date +%s%N)
    echo "[BLEEMSYNC](PROFILE) hack_usb_func took: $(((time1-time2)/1000000))ms to execute" >> "$runtime_log_path/bootloader.log"
    SCHEDULE_REBOOT=0
    # Trigger Update script after inital hack. Don't pipe to log, as /media may be unmounted
    install_recoverykit >> "$runtime_log_path/bootloader.log" 2>&1
    update
    hack_telnet_ftp_func >> "$runtime_log_path/bootloader.log" 2>&1
    install_usb_host >> "$runtime_log_path/bootloader.log" 2>&1
    install_ssh >> "$runtime_log_path/bootloader.log" 2>&1
    echo "[BLEEMSYNC](PROFILE) hack_telnet_ftp_func took: $(((time2-time1)/1000000))ms to execute" >> "$runtime_log_path/bootloader.log"
    if [ $SCHEDULE_REBOOT = 1 ]; then
      call_reboot
    fi
    time2=$(date +%s%N)
  fi
  unfuck_line_terminators >> "$runtime_log_path/bootloader.log" 2>&1
  time1=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) unfuck_line_terminators took: $(((time1-time2)/1000000))ms to execute" >> "$runtime_log_path/bootloader.log"
  general_unfuck >> "$runtime_log_path/bootloader.log" 2>&1
  time2=$(date +%s%N)
  echo "[BLEEMSYNC](PROFILE) general_unfuck took: $(((time2-time1)/1000000))ms to execute" >> "$runtime_log_path/bootloader.log"

  #Clean up
  [ -f "/tmp/bs_splash.flag" ] && rm -f "/tmp/bs_splash.flag"

  end=$(date +%s)
  echo "[BLEEMSYNC](PROFILE)(TOTAL) BOOTLOADER took: $((end-start))s to execute" >> "$runtime_log_path/bootloader.log"

  #Execute the BleemSync execution script
  /media/bleemsync/bin/execute
}

mount -o rw /dev/disk/by-label/SONY /media

#Beem me up Scotty
main

#If we get here... Panic and Reboot
sync
reboot
exit 1
